data <- read_excel("C:/Users/f_ati/Documents/Master2/Times series/Projet/Timeseries/Elec-train.xlsx")
data
#These quantities are measured every 15 minutes, 1h =60/15.
#from 1/1/2010 1:15 to 2/16/2010 23:45.
elec_power<-ts(data[1:4507,2],start=c(1,2),freq=24*60/15)
tail(elec_power)
plot(elec_power)
mean(elec_power)
tmp=acf(elec_power,type="cor",plot = FALSE)
tmp$acf[1:3,1,1]
plot(tmp)
pacf(elec_power)
#We need to make two sets of data: the train one (80%) and the test one (20%) in order to evaluate the model.
elec_power_train=head(elec_power,3607)
elec_power_test=tail(elec_power,900)
autoplot(elec_power_train,series="Train set")+
autolayer(elec_power_test,series='Test set')
SES=ses(elec_power_train,h=900, alpha = .2)
round(accuracy(SES,elec_power_test),2)
autoplot(SES)
# removing the trend
elec_power.train.dif <- diff(elec_power_train)
autoplot(elec_power.train.dif)
# reapplying SES on the filtered data
SES.diff=ses(elec_power.train.dif,h=900 ,alpha = .2)
autoplot(SES.diff)
# removing trend from test set
elec_power.dif.test <- diff(elec_power_test)
accuracy(SES.diff, elec_power.dif.test)
# comparing our model
alpha <- seq(.01, .99, by = .01)
RMSE <- NA
for(i in seq_along(alpha)) {
fit <- ses(elec_power.train.dif, alpha = alpha[i],
h = 900)
RMSE[i] <- accuracy(fit,
elec_power.dif.test)[2,2]
}
# convert to a data frame and
# identify min alpha value
alpha.fit <- data_frame(alpha, RMSE)
alpha.min <- filter(alpha.fit,
RMSE == min(RMSE))
# plot RMSE vs. alpha
ggplot(alpha.fit, aes(alpha, RMSE)) +
geom_line() +
geom_point(data = alpha.min,
aes(alpha, RMSE),
size = 2, color = "red")
# refit model with alpha = .7
SES.opt=ses(elec_power.train.dif,h=900 ,alpha = .2)
round(accuracy(SES.opt,elec_power.dif.test),2)
# plotting results
p1 <- autoplot(SES.opt) +
theme(legend.position = "bottom")
p2 <- autoplot(elec_power.dif.test) +
autolayer(SES.opt, alpha = .2) +
ggtitle("Predicted vs. actuals for
the test data set")
gridExtra::grid.arrange(p1, p2,
nrow = 1)
# Forecasting with a Holt
HOLT=holt(elec_power_train,h=900,alpha=NULL,beta=NULL)
round(accuracy(HOLT,elec_power_test),2)
autoplot(elec_power_train) + autolayer(HOLT,series='fitted',PI=FALSE)
#Additive seasonal Holt-Winters
fit1=hw(elec_power_train,  seasonal = "additive",h=900)
#Damped additive seasonal Holt-Winters
fit3 = hw(elec_power_train, seasonal='additive',h=900,damped=TRUE)
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(fit1$mean,series='Additive seasonal HW')+
autolayer(fit2$mean,series='Multiplicative seasonal HW')+
autolayer(fit3$mean,series='Damped additive seasonal HW')+
autolayer(fit4$mean,series='Damped multiplicative seasonal HW')+
xlab('Time (hr)') +
ylab('Power(kW)')
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
#autolayer(fit1$mean,series='Additive seasonal HW')+
autolayer(fit2$mean,series='Multiplicative seasonal HW')+
# autolayer(fit3$mean,series='Damped additive seasonal HW')+
autolayer(fit4$mean,series='Damped multiplicative seasonal HW')+
xlab('Time (hr)') +
ylab('Power(kW)')
#Additive seasonal Holt-Winters
#fit1=hw(elec_power_train,  seasonal = "additive",h=900)
#Multiplicative seasonal Holt-Winters
fit2 = hw(elec_power_train, seasonal='multiplicative',h=900)
cat('Additive seasonal: RMSE Test set = ',sqrt(mean((fit1$mean-elec_power_test)^2)),'\n')
#SARIMA model.
elec_power_arima=auto.arima(elec_power_train)
prev_arima=forecast(elec_power_arima,h=192)
autoplot(elec_power_test)+
autolayer(prev_arima$mean,series="SARIMA without covariate")
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
#SARIMA model.
elec_power_arima=auto.arima(elec_power_train)
prev_arima=forecast(elec_power_arima,h=900)
autoplot(elec_power_test)+
autolayer(prev_arima$mean,series="SARIMA without covariate")
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
round(accuracy(prev_arima, elec_power_test),2)
elec_power_nn = nnetar(elec_power_train)
pred_elec_power_nn = forecast(elec_power_nn, h = 900)
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
xlab('Time (hr)') +
ylab('Power (kW)')
round(accuracy(pred_elec_power_nn, elec_power_test),2)
print(elec_power_nn)
pred_elec_power_nn %>% forecast(h=900) %>% autoplot()
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
elec_power_pred = nnetar(elec_power)
pred_elec_power_pred = forecast(elec_power_pred, h = 96)
autoplot(elec_power,series="data set") +
autolayer(pred_elec_power_pred$mean,series='Neural Network')+
xlab('Time (hr)') +
ylab('Power (kW)')
elec_power_pred = nnetar(elec_power)
pred_elec_power_pred = forecast(elec_power_pred, h = 900)
autoplot(elec_power,series="data set") +
autolayer(pred_elec_power_pred$mean,series='Neural Network')+
xlab('Time (hr)') +
ylab('Power (kW)')
# Results
Pred = print(pred_elec_power_pred)
elec_power_pred = nnetar(elec_power)
pred_elec_power_pred = forecast(elec_power_pred, h = 96)
autoplot(elec_power,series="data set") +
autolayer(pred_elec_power_pred$mean,series='Neural Network')+
xlab('Time (hr)') +
ylab('Power (kW)')
# Results
Pred = print(pred_elec_power_pred)
#Checking model
checkresiduals(pred_elec_power_pred,test="LB",plot=TRUE)
elec_power_temp<-ts(data[1:4507,2:3],start=c(1,2),freq=96)
plot(elec_power_temp)
autoplot(elec_power_temp)
elec_temp<-ts(data[1:4507,3],start=c(1,2),freq=96)
plot(elec_temp)
autoplot(elec_temp)
#We need to make two sets of data: the train one (80%) and the test one (20%) in order to evaluate the model.
elec_temp_train=head(elec_temp,3607)
elec_temp_test=tail(elec_temp,900)
elec_power_temp_train_ar=auto.arima(elec_power_train,xreg=elec_temp_train)
prevar=forecast(elec_power_temp_train_ar,h=900,xreg=elec_temp_test)
autoplot(elec_temp_test)+autolayer(prevar$mean)
#RMSE
print(sqrt(mean((prevar$mean-elec_power_test)^2)))
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(prevar$mean,series='Dynamic Regression with Temperature')+
xlab('Time (hr)') +
ylab('Power (kW)')
summary(elec_power_temp_train_ar)
#autocorrelation of residuals
checkresiduals(elec_power_temp_train_ar,test="LB",plot=TRUE)
plot(elec_temp_train,elec_power_train)
elec_power_temp_nn = nnetar(elec_power_train,xreg = elec_temp_train)
pred_elec_power_temp_nn = forecast(elec_power_temp_nn,xreg = elec_temp_test, h = 900)
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(pred_elec_power_temp_nn$mean,series='Neural Network')+
xlab('Time (hr)') +
ylab('Power (kW)')
autoplot(elec_power_train,series='Test set') +
autolayer(pred_elec_power_temp_nn$mean,series='Neural Network')+
xlab('Time (hr)') +
ylab('Consumption (kW)')
#RMSE
print(sqrt(mean((pred_elec_power_temp_nn$mean-elec_power_test)^2)))
# Forecasting with a Holt
HOLT=holt(elec_power_train,h=900,alpha=NULL,beta=NULL)
round(accuracy(HOLT,elec_power_test),2)
autoplot(elec_power_train) + autolayer(HOLT,series='fitted',PI=FALSE)
# removing trend from test set
elec_power.dif.test <- diff(elec_power_test)
accuracy(SES.diff, elec_power.dif.test)
# comparing our model
alpha <- seq(.01, .99, by = .01)
RMSE <- NA
for(i in seq_along(alpha)) {
fit <- ses(elec_power.train.dif, alpha = alpha[i],
h = 900)
RMSE[i] <- accuracy(fit,
elec_power.dif.test)[2,2]
}
# convert to a data frame and
# identify min alpha value
alpha.fit <- data_frame(alpha, RMSE)
alpha.min <- filter(alpha.fit,
RMSE == min(RMSE))
# plot RMSE vs. alpha
ggplot(alpha.fit, aes(alpha, RMSE)) +
geom_line() +
geom_point(data = alpha.min,
aes(alpha, RMSE),
size = 2, color = "red")
# refit model with alpha = .7
SES.opt=ses(elec_power.train.dif,h=900 ,alpha = .2)
round(accuracy(SES.opt,elec_power.dif.test),2)
# refit model with alpha = .7
SES.opt=ses(elec_power.train.dif,h=900 ,alpha = .2)
round(accuracy(SES.opt,elec_power.dif.test),2)
elec_power_nn = nnetar(elec_power_train)
pred_elec_power_nn = forecast(elec_power_nn, h = 900)
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
xlab('Time (hr)') +
ylab('Power (kW)')
round(accuracy(pred_elec_power_nn, elec_power_test),2)
elec_consumption_train_NN2 = nnetar(elec_power_train,34,2,24,lambda='auto')
pred_consumption_train_NN2 = forecast(elec_consumption_train_NN2, h = 900)
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(pred_consumption_train_NN2$mean,series='Neural Network')+
ggtitle ('Electricity Consumption (kW) per hour') +
xlab('Time (hr)') +
ylab('Consumption (kW)')
#RSME
print(sqrt(mean((pred_consumption_train_NN2$mean-consum_test)^2)))
#RSME
print(sqrt(mean((pred_consumption_train_NN2$mean-elec_power_test)^2)))
print(elec_power_nn)
elec_consumption_train_NN2 = nnetar(elec_power_train,20,2,24,lambda='auto')
pred_consumption_train_NN2 = forecast(elec_consumption_train_NN2, h = 900)
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(pred_consumption_train_NN2$mean,series='Neural Network')+
ggtitle ('Electricity Consumption (kW) per hour') +
xlab('Time (hr)') +
ylab('Consumption (kW)')
#RSME
print(sqrt(mean((pred_consumption_train_NN2$mean-elec_power_test)^2)))
pred_elec_power_nn %>% forecast(h=900) %>% autoplot()
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(pred_elec_power_NN2$mean,series='Neural Network')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(pred_consumption_train_NN2$mean,series='Neural Network')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(pred_consumption_train_NN2$mean,series='Neural Network1')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
autoplot(elec_power_test,series='Test set') +
#autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(pred_consumption_train_NN2$mean,series='Neural Network1')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
round(accuracy(pred_elec_power_nn, elec_power_test),2)
print(elec_power_nn)
pred_elec_power_nn %>% forecast(h=900) %>% autoplot()
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(SES.opt)
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
elec_power_arima_pred=auto.arima(elec_power)
#Forecast 17/02/2010
elec_power_arima_pred=auto.arima(elec_power)
prev_arima_pred=forecast(elec_power_arima_pred,h=96)
autoplot(elec_power,series="Data set")+
autolayer(prev_arima_pred$mean,series="SARIMA without covariate",PI=FALSE)
# Results
Pred = print(prev_arima_pred)
#Checking model
checkresiduals(prev_arima_pred,test="LB",plot=TRUE)
write_csv(Pred,file="Pred_sans_temperature.csv")
write.xlsx(Pred, file, sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
elec_power_temp<-ts(data[1:4507,2:3],start=c(1,2),freq=96)
plot(elec_power_temp)
autoplot(elec_power_temp)
elec_temp<-ts(data[1:4507,3],start=c(1,2),freq=96)
plot(elec_temp)
autoplot(elec_temp)
#We need to make two sets of data: the train one (80%) and the test one (20%) in order to evaluate the model.
elec_temp_train=head(elec_temp,3607)
elec_temp_test=tail(elec_temp,900)
elec_power_temp_train_ar=auto.arima(elec_power_train,xreg=elec_temp_train)
prevar=forecast(elec_power_temp_train_ar,h=900,xreg=elec_temp_test)
autoplot(elec_temp_test)+autolayer(prevar$mean)
#RMSE
print(sqrt(mean((prevar$mean-elec_power_test)^2)))
#RMSE
print(sqrt(mean((prevar$mean-elec_power_test)^2)))
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(prevar$mean,series='Dynamic Regression with Temperature')+
xlab('Time (hr)') +
ylab('Power (kW)')
summary(elec_power_temp_train_ar)
#autocorrelation of residuals
checkresiduals(elec_power_temp_train_ar,test="LB",plot=TRUE)
plot(elec_temp_train,elec_power_train)
#RMSE
print(sqrt(mean((pred_elec_power_temp_nn$mean-elec_power_test)^2)))
#We can zoom in the prediction.
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_temp_nn$mean,series='Neural Network + Temperature')+
ggtitle ('Electricity Consumption (kW) per hour') +
xlab('Time (hr)') +
ylab('Consumption (kW)')
#We can zoom in the prediction.
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_temp_nn$mean,series='Neural Network + Temperature')+
autolayer(prevar,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Consumption (kW)')
temp_17 <- ts(data[4509:4603,3], frequency = 96, start=c(1,2))
head(temp_17)
temp_17 <- ts(data[4509:4603,3], frequency = 96, start=c(1,2))
head(temp_17)
tail(temp_17)
temp_17 <- ts(data[4508:4603,3], frequency = 96, start=c(1,2))
head(temp_17)
tail(temp_17)
elec_power_temp_train_ar_pred=auto.arima(elec_power,xreg=elec_temp)
prevar17=forecast(elec_power_temp_train_ar_pred,h=96,xreg=temp_17)
autoplot(elec_power,series="Power Consumption 1/1/2010 - 16/1/2010")
+autolayer(prevar17$mean,series="SARIMA without covariate using Temperature for 17/2/2010",PI=FALSE)
elec_power_temp_train_ar_pred=auto.arima(elec_power,xreg=elec_temp)
elec_power_temp_train_ar_pred=auto.arima(elec_power,xreg=elec_temp)
prevar17=forecast(elec_power_temp_train_ar_pred,h=96,xreg=temp_17)
autoplot(elec_power,series="Power Consumption 1/1/2010 - 16/1/2010") +
autolayer(prevar17$mean,series="SARIMA without covariate using Temperature for 17/2/2010",PI=FALSE) +
xlab('Time (hr)') +
ylab('Power (kW)')
#Pred results
Pred_T = print(prevar17)
#Checking model
checkresiduals(prevar17,test="LB",plot=TRUE)
write_csv(prevar17,file="Pred_with_temperature.csv")
write_csv(Pred_T,file="Pred_with_temperature.csv")
write.xlsx(Pred_T, file, sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
#Installations
#install.packages("readxl")
#install.packages("forecast")
#install.packages("ggplot2")
library(readxl)
library(forecast)
library(ggplot2)
library(tidyverse)
library(fpp2)
library(gridExtra)
library(xlsx)
#Loading the data
data <- read_excel("C:/Users/f_ati/Documents/Master2/Times series/Projet/Timeseries/Elec-train.xlsx")
data
#These quantities are measured every 15 minutes, 1h =60/15.
#from 1/1/2010 1:15 to 2/16/2010 23:45.
elec_power<-ts(data[1:4507,2],start=c(1,2),freq=24*60/15)
tail(elec_power)
plot(elec_power)
mean(elec_power)
tmp=acf(elec_power,type="cor",plot = FALSE)
tmp$acf[1:3,1,1]
plot(tmp)
pacf(elec_power)
#We need to make two sets of data: the train one (80%) and the test one (20%) in order to evaluate the model.
elec_power_train=head(elec_power,3607)
elec_power_test=tail(elec_power,900)
autoplot(elec_power_train,series="Train set")+
autolayer(elec_power_test,series='Test set')
SES=ses(elec_power_train,h=900, alpha = .2)
round(accuracy(SES,elec_power_test),2)
autoplot(SES)
# removing the trend
elec_power.train.dif <- diff(elec_power_train)
autoplot(elec_power.train.dif)
# reapplying SES on the filtered data
SES.diff=ses(elec_power.train.dif,h=900 ,alpha = .2)
autoplot(SES.diff)
# removing the trend
elec_power.train.dif <- diff(elec_power_train)
autoplot(elec_power.train.dif)
# reapplying SES on the filtered data
SES.diff=ses(elec_power.train.dif,h=900 ,alpha = .2)
autoplot(SES.diff)
# removing trend from test set
elec_power.dif.test <- diff(elec_power_test)
accuracy(SES.diff, elec_power.dif.test)
# comparing our model
alpha <- seq(.01, .99, by = .01)
RMSE <- NA
for(i in seq_along(alpha)) {
fit <- ses(elec_power.train.dif, alpha = alpha[i],
h = 900)
RMSE[i] <- accuracy(fit,
elec_power.dif.test)[2,2]
}
# convert to a data frame and
# identify min alpha value
alpha.fit <- data_frame(alpha, RMSE)
alpha.min <- filter(alpha.fit,
RMSE == min(RMSE))
# plot RMSE vs. alpha
ggplot(alpha.fit, aes(alpha, RMSE)) +
geom_line() +
geom_point(data = alpha.min,
aes(alpha, RMSE),
size = 2, color = "red")
# refit model with alpha = .7
SES.opt=ses(elec_power.train.dif,h=900 ,alpha = .2)
round(accuracy(SES.opt,elec_power.dif.test),2)
# plotting results
p1 <- autoplot(SES.opt) +
theme(legend.position = "bottom")
p2 <- autoplot(elec_power.dif.test) +
autolayer(SES.opt, alpha = .2) +
ggtitle("Predicted vs. actuals for
the test data set")
gridExtra::grid.arrange(p1, p2,
nrow = 1)
# Forecasting with a Holt
HOLT=holt(elec_power_train,h=900,alpha=NULL,beta=NULL)
round(accuracy(HOLT,elec_power_test),2)
autoplot(elec_power_train) + autolayer(HOLT,series='fitted',PI=FALSE)
#SARIMA model.
elec_power_arima=auto.arima(elec_power_train)
prev_arima=forecast(elec_power_arima,h=900)
autoplot(elec_power_test)+
autolayer(prev_arima$mean,series="SARIMA without covariate")
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
round(accuracy(prev_arima, elec_power_test),2)
elec_power_nn = nnetar(elec_power_train)
pred_elec_power_nn = forecast(elec_power_nn, h = 900)
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
xlab('Time (hr)') +
ylab('Power (kW)')
round(accuracy(pred_elec_power_nn, elec_power_test),2)
print(elec_power_nn)
pred_elec_power_nn %>% forecast(h=900) %>% autoplot()
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
autoplot(elec_power_test,series='Test set') +
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
autolayer(prev_arima,series='SARIMA without covariate',PI=FALSE)+
xlab('Time (hr)') +
ylab('Power (kW)')
#Forecast 17/02/2010
elec_power_arima_pred=auto.arima(elec_power)
prev_arima_pred=forecast(elec_power_arima_pred,h=96)
autoplot(elec_power,series="Data set")+
autolayer(prev_arima_pred$mean,series="SARIMA without covariate",PI=FALSE)
# Results
Pred = print(prev_arima_pred)
elec_power_nn = nnetar(elec_power_train)
pred_elec_power_nn = forecast(elec_power_nn, h = 900)
autoplot(elec_power_train,series="Train set") +
autolayer(elec_power_test,series='Test set')+
autolayer(pred_elec_power_nn$mean,series='Neural Network')+
xlab('Time (hr)') +
ylab('Power (kW)')
round(accuracy(pred_elec_power_nn, elec_power_test),2)
